// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_log_lm_terms
SEXP get_log_lm_terms(arma::mat const& lower, arma::mat const& upper, arma::imat const& code);
RcppExport SEXP _mdgc_get_log_lm_terms(SEXP lowerSEXP, SEXP upperSEXP, SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::imat const& >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_log_lm_terms(lower, upper, code));
    return rcpp_result_gen;
END_RCPP
}
// eval_log_lm_terms
Rcpp::NumericVector eval_log_lm_terms(SEXP ptr, arma::ivec const& indices, arma::mat const& vcov, int const maxpts, double const abseps, double const releps, size_t const n_threads, bool const comp_derivs, bool const do_reorder);
RcppExport SEXP _mdgc_eval_log_lm_terms(SEXP ptrSEXP, SEXP indicesSEXP, SEXP vcovSEXP, SEXP maxptsSEXP, SEXP absepsSEXP, SEXP relepsSEXP, SEXP n_threadsSEXP, SEXP comp_derivsSEXP, SEXP do_reorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< arma::ivec const& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type vcov(vcovSEXP);
    Rcpp::traits::input_parameter< int const >::type maxpts(maxptsSEXP);
    Rcpp::traits::input_parameter< double const >::type abseps(absepsSEXP);
    Rcpp::traits::input_parameter< double const >::type releps(relepsSEXP);
    Rcpp::traits::input_parameter< size_t const >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool const >::type comp_derivs(comp_derivsSEXP);
    Rcpp::traits::input_parameter< bool const >::type do_reorder(do_reorderSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_log_lm_terms(ptr, indices, vcov, maxpts, abseps, releps, n_threads, comp_derivs, do_reorder));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_mdgc_get_log_lm_terms", (DL_FUNC) &_mdgc_get_log_lm_terms, 3},
    {"_mdgc_eval_log_lm_terms", (DL_FUNC) &_mdgc_eval_log_lm_terms, 9},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_mdgc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
